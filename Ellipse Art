using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EllipseArt
{
    public struct Ellipse
    {
        public float x1, y1, x2, y2, r;
        
        public Ellipse(float p1, float p2, float p3, float p4, float p5)
        {
            x1 = p1;
            y1 = p2;
            x2 = p3;
            y2 = p4;
            r = p5;
        }
    }
    
   class Solution
   {
       public static float canvasSize = 10000;
       public static int canvasBounds = 50;
       public static float resolutionOfCanvas = 0.25f;
	   public static double allTheDots = canvasSize / (resolutionOfCanvas * resolutionOfCanvas);  
       
       static void Main(string[] args)
       {
            int numOfTests = int.Parse(Console.ReadLine());
            int[] tests = new int[numOfTests];
           
            for(int i = 0; i < numOfTests; i++)
            {
                tests[i] = SingleTestRun();
                Console.WriteLine(tests[i] + "%");
            }
       }
              
       public static int SingleTestRun()
       {
           int numberOFEllipses = int.Parse(Console.ReadLine());
           Ellipse[] ellipses = new Ellipse[numberOFEllipses];
		   int paintedArea = 0;
		   bool isPointInside = true;
           
           for(int i = 0 ; i < numberOFEllipses; i++)
           {
               var ellipseProperties = Console.ReadLine().Split(' ');
			   ellipses[i].x1 = float.Parse(ellipseProperties[0]);
			   ellipses[i].y1 = float.Parse(ellipseProperties[1]);
			   ellipses[i].x2 = float.Parse(ellipseProperties[2]);
			   ellipses[i].y2 = float.Parse(ellipseProperties[3]);
			   ellipses[i].r = float.Parse(ellipseProperties[4]);   
           }
		   
		   //run on all the points by the resolution defined to check either 
		   //the point inside ellipse and inside canvas aswell
		   for (float i = -canvasBounds; i < canvasBounds; i += resolutionOfCanvas)
		   {
			   for(float j = -canvasBounds; j < canvasBounds; j += resolutionOfCanvas)
			   {
				   for(int k = 0; k < numberOFEllipses; k++)
				   {
					   isPointInside = CheckConcretePoint(i, j, ellipses[k]);
					   //if inside add the point to the area
					   if(isPointInside)
					   {
						   paintedArea++;
						   break;
					   }
				   }
			   }
		   }  
		   
		   return (int)Math.Round((1 - (paintedArea / allTheDots)) * 100);
       }
       

	   
        public static bool CheckConcretePoint(float x, float y, Ellipse curElipse)
       {
            bool isInside = false;
			
			if(PointDistance(curElipse.x1, curElipse.y1, x, y) + PointDistance(curElipse.x2, curElipse.y2, x, y) < curElipse.r)
			{
				isInside = true;
			}
			
		   return isInside;
       }
	   
	   public static double PointDistance(float x1, float y1, float x2, float y2)
	   {
		   float center1 = x2 - x1, center2 = y2 - y1;
		   return Math.Sqrt((center1 * center1) + (center2 * center2));
	   }
   }
}
