using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;

namespace Full_Adder
{
    class Solution 
    {
        private static Dictionary<int, char> BaseIntToChar = new Dictionary<int, char>(63);
        private static Dictionary<char, int> BaseCharToInt = new Dictionary<char, int>(63);
        
        static void Main(String[] args)
        {
            var b_line = Console.ReadLine();
            var firstItem = Console.ReadLine();
            var secondItem = Console.ReadLine();
            var secondItem_no_plus = secondItem.Replace("+", "");
            
            var minuses = Console.ReadLine();
            
            var b_line_values = b_line.Split(' ');
            var base_Size = int.Parse(b_line_values[0]);
            var base_List = b_line_values[1].ToCharArray();
            
            for (int i = 0; i < base_Size; i++ )
            {
                BaseIntToChar.Add(i, base_List[i]);
                BaseCharToInt.Add(base_List[i], i);
            }
            
            var added_Value = Adder(firstItem.Trim(),
                                       secondItem_no_plus.Trim(),
                                       base_Size);
            //output
            Console.WriteLine(b_line);
            Console.WriteLine(firstItem);
            Console.WriteLine(secondItem);
            Console.WriteLine(minuses);
            added_Value = added_Value.PadLeft(minuses.Length, ' ');
            Console.WriteLine(added_Value);
        }
        
        static string Adder(string firstItem, 
                            string secondItem,
                            int base_Size)
        {
            var carry = 0;
            var max_string_size = Math.Max(firstItem.Length, secondItem.Length);
            var the_0_value = BaseIntToChar[0];
            firstItem = firstItem.PadLeft(max_string_size, the_0_value);
            secondItem = secondItem.PadLeft(max_string_size, the_0_value);
            var result = new StringBuilder();
            
            for(int i = firstItem.Length - 1; i >= 0; i--)
            {
                var c = BaseCharToInt[firstItem[i]] + BaseCharToInt[secondItem[i]] +  carry;  
                
                if(c >= base_Size)
                {
                    carry = 1;
                }
                else
                    carry = 0;
                
                result.Append(BaseIntToChar[c % base_Size]);
            }
            
            char[] charResult = result.ToString().ToCharArray();
            Array.Reverse(charResult);
            return new string(charResult);
        }
    }
}
